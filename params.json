{
  "name": "LBFGS++",
  "tagline": "A Header-only C++ Library for L-BFGS and L-BFGS-B Algorithms",
  "body": "**LBFGS++** is a header-only C++ library that implements the Limited-memory\r\nBFGS algorithm (L-BFGS) for unconstrained minimization problem. The code is\r\nderived and modified from the [libLBFGS](https://github.com/chokkan/liblbfgs)\r\nlibrary developed by [Naoaki Okazaki](http://www.chokkan.org/).\r\n\r\n**LBFGS++** is implemented as a header-only C++ library, whose only dependency,\r\n[Eigen](http://eigen.tuxfamily.org/), is also header-only.\r\n\r\n## A Quick Example\r\n\r\nTo use **LBFGS++**, one needs to first define a functor to represent the\r\nmultivariate function to be minimized. It should return the objective function\r\nvalue on a vector `x` and overwrite the vector `grad` with the gradient\r\nevaluated on `x`. For example we could define the\r\n[Rosenbrock function](https://en.wikipedia.org/wiki/Rosenbrock_function) in the\r\nfollowing way:\r\n\r\n```cpp\r\n#include <Eigen/Core>\r\n#include <iostream>\r\n#include <LBFGS.h>\r\n\r\nusing Eigen::VectorXd;\r\nusing namespace LBFGSpp;\r\n\r\nclass Rosenbrock\r\n{\r\nprivate:\r\n    int n;\r\npublic:\r\n    Rosenbrock(int n_) : n(n_) {}\r\n    double operator()(const VectorXd& x, VectorXd& grad)\r\n    {\r\n        double fx = 0.0;\r\n        for(int i = 0; i < n; i += 2)\r\n        {\r\n            double t1 = 1.0 - x[i];\r\n            double t2 = 10 * (x[i + 1] - x[i] * x[i]);\r\n            grad[i + 1] = 20 * t2;\r\n            grad[i]     = -2.0 * (x[i] * grad[i + 1] + t1);\r\n            fx += t1 * t1 + t2 * t2;\r\n        }\r\n        return fx;\r\n    }\r\n};\r\n```\r\n\r\nThen we just need to set up parameters, create solver object,\r\nprovide initial guess, and then run the minimization function.\r\n\r\n```cpp\r\nint main()\r\n{\r\n    const int n = 10;\r\n    // Set up parameters\r\n    LBFGSParam<double> param;\r\n    param.epsilon = 1e-6;\r\n    param.max_iterations = 100;\r\n\r\n    // Create solver and function object\r\n    LBFGSSolver<double> solver(param);\r\n    Rosenbrock fun(n);\r\n\r\n    // Initial guess\r\n    VectorXd x = VectorXd::Zero(n);\r\n    // x will be overwritten to be the best point found\r\n    double fx;\r\n    int niter = solver.minimize(fun, x, fx);\r\n\r\n    std::cout << niter << \" iterations\" << std::endl;\r\n    std::cout << \"x = \\n\" << x.transpose() << std::endl;\r\n    std::cout << \"f(x) = \" << fx << std::endl;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nThe example can then be compiled and run.\r\n\r\n```bash\r\n$ g++ -I/path/to/eigen -I/path/to/lbfgspp/include -O2 example.cpp\r\n$ ./a.out\r\n23 iterations\r\nx =\r\n1 1 1 1 1 1 1 1 1 1\r\nf(x) = 1.87948e-19\r\n```\r\n\r\n## Documentation\r\n\r\nThe [API reference](http://yixuan.cos.name/LBFGSpp/doc/) page contains the documentation\r\nof **LBFGS++** generated by [Doxygen](http://www.doxygen.org/).\r\n\r\n## License\r\n\r\n**LBFGS++** is an open source project under the MIT license.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
